/*
 * This source file was generated by the Gradle 'init' task
 */
package org.finance.financecli;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

@Command(name = "financecli", mixinStandardHelpOptions = true, version = "1.0",
         description = "Finance CLI application",
         subcommands = {App.SummariseExpensesCommand.class, App.SummariseExpensesDanCommand.class, App.FilterCommand.class})
public class App implements Runnable {
    
    @Option(names = {"--hello"}, description = "Print hello message")
    private boolean hello;

    private static final String CONFIG_FILE = "filter-config.txt";

    public String getGreeting() {
        return "Hello World!";
    }

    @Override
    public void run() {
        if (hello) {
            System.out.println("Hello from PicoCli!");
        } else {
            System.out.println(getGreeting());
        }
    }
    
    private static List<String> loadFilters() throws IOException {
        java.nio.file.Path configPath = Paths.get(CONFIG_FILE);
        if (Files.exists(configPath)) {
            return Files.readAllLines(configPath);
        }
        return new ArrayList<>();
    }
    
    private static void saveFilters(List<String> filters) throws IOException {
        Files.write(Paths.get(CONFIG_FILE), filters, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }

    @Command(name = "summarise-expenses", description = "Summarise expenses from CSV file")
    static class SummariseExpensesCommand implements Runnable {
        
        @Parameters(index = "0", description = "Path to CSV file")
        private Path csvFile;
        
        @Option(names = {"--filtered"}, description = "Apply filtering with month header and filtered expenses section")
        private boolean filtered;

        @Override
        public void run() {
            if (filtered) {
                runFilteredMode();
            } else {
                runBasicMode();
            }
        }
        
        private void runBasicMode() {
            try (BufferedReader reader = new BufferedReader(new FileReader(csvFile.toFile()))) {
                String line;
                boolean isFirstLine = true;
                
                while ((line = reader.readLine()) != null) {
                    if (isFirstLine) {
                        isFirstLine = false;
                        continue;
                    }
                    
                    String[] fields = parseCSVLine(line);
                    if (fields.length >= 6) {
                        String valueDate = fields[0];
                        String type = fields[2];
                        String description = fields[3];
                        String amount = fields[5];
                        
                        if (!"Transfer".equals(type)) {
                            System.out.println(valueDate + "," + description + "," + amount);
                        }
                    }
                }
            } catch (IOException e) {
                System.err.println("Error reading file: " + e.getMessage());
                System.exit(1);
            }
        }
        
        private void runFilteredMode() {
            List<String> mainExpenses = new ArrayList<>();
            List<String> filteredExpenses = new ArrayList<>();
            String monthYear = "";
            
            try (BufferedReader reader = new BufferedReader(new FileReader(csvFile.toFile()))) {
                String line;
                boolean isFirstLine = true;
                
                while ((line = reader.readLine()) != null) {
                    if (isFirstLine) {
                        isFirstLine = false;
                        continue;
                    }
                    
                    String[] fields = parseCSVLine(line);
                    if (fields.length >= 6) {
                        String valueDate = fields[0];
                        String type = fields[2];
                        String description = fields[3];
                        String amount = fields[5];
                        
                        if (monthYear.isEmpty() && !valueDate.isEmpty()) {
                            monthYear = getMonthYear(valueDate);
                        }
                        
                        if (!"Transfer".equals(type)) {
                            String expenseLine = valueDate + "," + description + "," + amount;
                            
                            if (shouldFilterDescription(description)) {
                                filteredExpenses.add(expenseLine);
                            } else {
                                mainExpenses.add(expenseLine);
                            }
                        }
                    }
                }
                
                System.out.println(monthYear);
                System.out.println();
                
                for (String expense : mainExpenses) {
                    System.out.println(expense);
                }
                
                if (!filteredExpenses.isEmpty()) {
                    System.out.println();
                    System.out.println("Filtered out expenses:");
                    for (String expense : filteredExpenses) {
                        System.out.println(expense);
                    }
                }
                
            } catch (IOException e) {
                System.err.println("Error reading file: " + e.getMessage());
                System.exit(1);
            }
        }
        
        private boolean shouldFilterDescription(String description) {
            try {
                List<String> filters = loadFilters();
                for (String filter : filters) {
                    if (description.startsWith(filter)) {
                        return true;
                    }
                }
                return false;
            } catch (IOException e) {
                System.err.println("Error loading filters: " + e.getMessage());
                return false;
            }
        }
        
        private String getMonthYear(String dateStr) {
            try {
                LocalDate date = LocalDate.parse(dateStr, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                String month = date.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);
                return month + " " + date.getYear();
            } catch (Exception e) {
                return "Unknown Date";
            }
        }
        
        private String[] parseCSVLine(String line) {
            String[] result = new String[6];
            int fieldIndex = 0;
            StringBuilder currentField = new StringBuilder();
            boolean inQuotes = false;
            
            for (int i = 0; i < line.length() && fieldIndex < 6; i++) {
                char c = line.charAt(i);
                
                if (c == '"') {
                    inQuotes = !inQuotes;
                } else if (c == ',' && !inQuotes) {
                    result[fieldIndex++] = currentField.toString();
                    currentField = new StringBuilder();
                } else {
                    currentField.append(c);
                }
            }
            
            if (fieldIndex < 6) {
                result[fieldIndex] = currentField.toString();
            }
            
            return result;
        }
    }

    @Command(name = "summarise-expenses-dan", description = "Summarise expenses from CSV file with extra filtering")
    static class SummariseExpensesDanCommand implements Runnable {
        
        @Parameters(index = "0", description = "Path to CSV file")
        private Path csvFile;

        @Override
        public void run() {
            List<String> mainExpenses = new ArrayList<>();
            List<String> filteredExpenses = new ArrayList<>();
            String monthYear = "";
            
            try (BufferedReader reader = new BufferedReader(new FileReader(csvFile.toFile()))) {
                String line;
                boolean isFirstLine = true;
                
                while ((line = reader.readLine()) != null) {
                    if (isFirstLine) {
                        isFirstLine = false;
                        continue;
                    }
                    
                    String[] fields = parseCSVLine(line);
                    if (fields.length >= 6) {
                        String valueDate = fields[0];
                        String type = fields[2];
                        String description = fields[3];
                        String amount = fields[5];
                        
                        if (monthYear.isEmpty() && !valueDate.isEmpty()) {
                            monthYear = getMonthYear(valueDate);
                        }
                        
                        if (!"Transfer".equals(type)) {
                            String expenseLine = valueDate + "," + description + "," + amount;
                            
                            if (shouldFilterDescription(description)) {
                                filteredExpenses.add(expenseLine);
                            } else {
                                mainExpenses.add(expenseLine);
                            }
                        }
                    }
                }
                
                System.out.println(monthYear);
                System.out.println();
                
                for (String expense : mainExpenses) {
                    System.out.println(expense);
                }
                
                if (!filteredExpenses.isEmpty()) {
                    System.out.println();
                    System.out.println("Filtered out expenses:");
                    for (String expense : filteredExpenses) {
                        System.out.println(expense);
                    }
                }
                
            } catch (IOException e) {
                System.err.println("Error reading file: " + e.getMessage());
                System.exit(1);
            }
        }
        
        private boolean shouldFilterDescription(String description) {
            try {
                List<String> filters = loadFilters();
                for (String filter : filters) {
                    if (description.startsWith(filter)) {
                        return true;
                    }
                }
                return false;
            } catch (IOException e) {
                System.err.println("Error loading filters: " + e.getMessage());
                return false;
            }
        }
        
        private String getMonthYear(String dateStr) {
            try {
                LocalDate date = LocalDate.parse(dateStr, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                String month = date.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);
                return month + " " + date.getYear();
            } catch (Exception e) {
                return "Unknown Date";
            }
        }
        
        private String[] parseCSVLine(String line) {
            String[] result = new String[6];
            int fieldIndex = 0;
            StringBuilder currentField = new StringBuilder();
            boolean inQuotes = false;
            
            for (int i = 0; i < line.length() && fieldIndex < 6; i++) {
                char c = line.charAt(i);
                
                if (c == '"') {
                    inQuotes = !inQuotes;
                } else if (c == ',' && !inQuotes) {
                    result[fieldIndex++] = currentField.toString();
                    currentField = new StringBuilder();
                } else {
                    currentField.append(c);
                }
            }
            
            if (fieldIndex < 6) {
                result[fieldIndex] = currentField.toString();
            }
            
            return result;
        }
    }

    @Command(name = "filter", description = "Manage filtered descriptions")
    static class FilterCommand implements Runnable {
        
        @Option(names = {"--add"}, description = "Add description to filter list")
        private String addFilter;
        
        @Option(names = {"--remove"}, description = "Remove description from filter list")
        private String removeFilter;
        
        @Option(names = {"--list"}, description = "List all current filters")
        private boolean listFilters;

        @Override
        public void run() {
            try {
                if (addFilter != null) {
                    addFilterToConfig(addFilter);
                    System.out.println("Added filter: " + addFilter);
                } else if (removeFilter != null) {
                    removeFilterFromConfig(removeFilter);
                    System.out.println("Removed filter: " + removeFilter);
                } else if (listFilters) {
                    listCurrentFilters();
                } else {
                    listCurrentFilters();
                }
            } catch (IOException e) {
                System.err.println("Error managing filters: " + e.getMessage());
            }
        }
        
        private void addFilterToConfig(String filter) throws IOException {
            List<String> filters = loadFilters();
            if (!filters.contains(filter)) {
                filters.add(filter);
                saveFilters(filters);
            }
        }
        
        private void removeFilterFromConfig(String filter) throws IOException {
            List<String> filters = loadFilters();
            filters.remove(filter);
            saveFilters(filters);
        }
        
        private void listCurrentFilters() throws IOException {
            List<String> filters = loadFilters();
            System.out.println("Current filters:");
            for (String filter : filters) {
                System.out.println("  " + filter);
            }
        }
    }

    public static void main(String[] args) {
        int exitCode = new CommandLine(new App()).execute(args);
        System.exit(exitCode);
    }
}
